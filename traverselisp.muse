Traverselisp Manual

Traverse is a library of recursive search functions in Emacs.

-----

* Installation

Put the file traverselisp.el in your Load path.

Write in your init-file (.emacs):

<code>
(require 'traverselisp)
</code>

-----

* Configuration

** Exemple of Config

<code>

(require 'traverselisp)

(setq traverse-use-avfs t)

(global-set-key (kbd "<f5> f") 'traverse-deep-rfind)

(global-set-key (kbd "<f5> u") 'traverse-build-tags-in-project)

(global-set-key (kbd "C-c o") 'traverse-occur-current-buffer)

(define-key dired-mode-map (kbd "A") 'traverse-dired-search-regexp-in-anything-at-point)

(define-key dired-mode-map (kbd "C-c C-z") 'traverse-dired-browse-archive)

(define-key dired-mode-map (kbd "C-c t") 'traverse-dired-find-in-all-files)

(add-to-list 'traverse-ignore-files ".ledger-cache")

</code>

** Variables

-----

* Functions

-----

* Keymap

Use C-h m as usual while in a traverse buffer.

Special commands:
key             binding
---             -------

ESC             Prefix Command

N               traverse-go-forward

P               traverse-go-backward

R               traverse-search-and-replace-all

S               traverse-search-and-replace

q               traverse-quit

|               traverse-toggle-split-window-h-v

<S-down>        traverse-scroll-down-other-window

<S-up>          traverse-scroll-up-other-window

-----


* Usage

** Settings

There is at list 2 important variables to visit and eventually to set:


 - *traverse-ignore-files* ==> this is a list of files to ignore.

 - *traverse-ignore-dirs* ==> this is a list of directories to ignore.

They are already set with default values, you may want to modify that.

** Searching

*** Search in a Whole tree

<code>

M-x traverse-deep-rfind

</code>

=(traverse-deep-rfind tree regexp &optional only)=

Main function that call walk, if only is omitted it

will be set as nil and search will be proceeded on all files

except on files that are in `traverse-ignore-files'

Called with prefix-argument (C-u) absolute path is displayed


*** Search in a file

<code>

M-x traverse-find-in-file

</code>

"=(traverse-find-in-file fname regexp &optional full-path)"=

Traverse search regex in a single file

*** Search in a buffer

*(traverse-occur-current-buffer regexp)*

Search regexp in current buffer

*** Search from Dired

All the precedent functions can be called from dired.

The function:

 - *traverse-dired-search-regexp-in-anything-at-point*

Will search regexp in file at point in dired buffer

or

if files are marked, it will search in these files.

or

if file at point is a directory, will use `traverse-deep-rfind' on this directory.

NOTE: if directories are marked, they are ignored.


 - *traverse-dired-find-in-all-files*


"=(traverse-dired-find-in-all-files regexp &optional full-path)"=

Traverse search regex in all files of current dired buffer

except compressed files and symlinks.
  

*** Search in archives

Traverse use AVFS to search in compressed archives.

To do that, you have first to install *avfs*  and *fuse* on your system:

http://sourceforge.net/projects/avf

Then you can open and browse archive in dired with:

"=(traverse-dired-browse-archive)"=

This function use AVFS and FUSE, so be sure
to have these programs and modules installed on your system


** Navigating From traverse buffer

Principal command are:

"N ==> find next occurence in other buffer."

"P ==> find precedent occurence in other buffer."

"R ==> call another menu for interactive replacement."

"S ==> replace regexp in current line with new regexp."


** Replacing

*** Replace in just one line

From a traverse buffer use S
 
*** Replace all

From a traverse buffer use R

To stop the replace process use C-g

** Creating Tag file in project

(traverse-build-tags-in-project dir ext &optional new-file)

Build an etags file in current project.
If `new-file' is non-nil (do it with C-u) build a new file
instead of appending to the current one.
Many file extensions can be enter at `ext' prompt.
Tag file will be build in `dir'

** Moving files of all subdirs to one dir
 
traverse-cp-or-mv-extfiles-in-dir is an interactive compiled Lisp
function in `traverselisp.el'.

(traverse-cp-or-mv-extfiles-in-dir tree ext dir &optional (fn (quote
copy-file)))

Recurse in `tree' and copy/move all files with `ext' in `dir'.
Default is copying, called with prefix-arg (C-u) Move files with `ext' in `Dir'.
`func' is a symbol when called non-interactively.

Note: `dir' will be use as target and NO search inside it will be performed.
If you want to move/copy files that are nested in subdir(s) of `dir'
It will fail silently.==> So use another dir target

If `dir' exists and is not empty, it will be synch with the newest files
found in `tree'


-----
 
* Using traverselisp with anything

Using traverselisp in anything is great and fast.

You have only one command to remember:

M-x anything-traverse

Thats all!

You can use with this command a prefix arg: (C-u)

C-u will not have the same meaning depending you are in a dired-buffer

or in a buffer:


 - In a buffer "C-u M-x anything-traverse" will use as input symbol at point.
 
 - In Dired "C-u M-x anything-traverse" will prompt you for a regexp to match file (e.g .el$)

  
It provide two methods:

 - In a buffer

If you are working in a buffer (file, scratch, slime etc..)

it will search for regex in this buffer.

 - In a Dired buffer

Search will be performed on ALL files of current-directory (no recursion in subdir)

unless you mark files in this dired buffer.

If you mark one or more file(s), the search is performed on this/these file(s).

You can navigate from file to file in anything-buffer. (M-n/M-p)


** anything-traverse find all files in current tree

That is a good alternative to `locate' to search files because you will search

in the current tree instead of searching in the whole system.

You will have a mini data base for each tree where you launch a search in.

Anything-traverse will recurse throught current tree and get all the files of

Directories and subdirectories of this tree.

Use command: `anything-files-in-current-tree'

If you launch that in a big tree (e.g your home directory)

it can take a long time to load, but once it will be loaded, the next

searchs will be fast.

For information, on my laptop with 1.87GHZ cpu (duo), it take 11s to load

my entire /home/$USER that is actually 19GB (about 35000 files recorded).

When it is loaded it take only 2 second to load all files in anything.

If `anything-c-files-in-current-tree-allow-tagging' is non--nil (the default)

the list of files in this tree will be saved to a file named by default `ANYTHING-TAG-FILE'

so it will not have to make another search if you restart emacs.

If you call `anything-files-in-current-tree' with a prefix arg (C-u), the data-base will be updated.

** Anything-traverse variables

`anything-c-traverse-func' default: `traverse-buffer-process-ext'

See `traverse-buffer-process-ext' in traverselisp.el

`anything-c-traverse-length-line' default: 80

Length of the line displayed in anything buffer.

`anything-c-files-in-current-tree-ignore-files' default: `traverse-ignore-files'

See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-ignore-files' default: traverse-ignore-files
  
See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-fontify-buffer' default:nil

Fontify buffer before starting a search in a buffer.

This have no effect on searching in files from dired.

This can SLOW down search when non--nil but if you don't perform search in

huge buffers it can be set to t.

** Anything-traverse configuration

(require 'anything-traverse)

Example config

 - For `anything-c-files-in-current-tree':

(global-set-key (kbd "C-c C-f") 'anything-files-in-current-tree)

(setq anything-c-files-in-current-tree-ignore-files '(".elc$" ".pyc$"
                                                      ".orig$" ".rej$"
                                                      "ANYTHING-TAG-FILE"))

 - For `anything-c-source-traverse-occur':

(global-set-key (kbd "C-c M-g") 'anything-traverse)

 - For `anything-traverse-c-source-record-positions':

(global-set-key (kbd "C-c <SPC>") 'anything-traverse-record-pos)

(global-set-key (kbd "C-c j p") 'anything-traverse-positions-ring)


-----
