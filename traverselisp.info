Info file: traverselisp.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from filebuffer `*--traverselisp.texi--temporary-buffer*'
using `texinfmt.el' version 2.42 of  7 Jul 2006.


File: traverselisp.info, Node: Top, Next: Installation, Prev: (dir), Up: (dir)

Overview
********

Traverselisp Manual

Traverse is a library of recursive search functions in Emacs.



* Menu:

* Installation::
* Configuration::
* Functions::
* Keymap::
* Usage::
* Using traverselisp with anything::

 -- The Detailed Node Listing ---

Configuration

* Exemple of Config::
* Variables::

Usage

* Settings::
* Searching::
* Navigating From traverse buffer::
* Replacing::
* Creating Tag file in project::
* Moving files of all subdirs to one dir::

Searching

* Search in a Whole tree::
* Search in a file::
* Search in a buffer::
* Search from Dired::
* Search in archives::

Replacing

* Replace in just one line::
* Replace all::

Using traverselisp with anything

* anything-traverse find all files in current tree::
* Anything-traverse variables::
* Anything-traverse configuration::




File: traverselisp.info, Node: Installation, Next: Configuration, Prev: Top, Up: Top

Installation
************

Put the file traverselisp.el in your Load path.

Write in your init-file (.emacs):

` (require 'traverselisp) '






File: traverselisp.info, Node: Configuration, Next: Functions, Prev: Installation, Up: Top

Configuration
*************

* Menu:

* Exemple of Config::
* Variables::



File: traverselisp.info, Node: Exemple of Config, Next: Variables, Prev: Configuration, Up: Configuration

Exemple of Config
=================

`

(require 'traverselisp)

(setq traverse-use-avfs t)

(global-set-key (kbd "<f5> f") 'traverse-deep-rfind)

(global-set-key (kbd "<f5> u") 'traverse-build-tags-in-project)

(global-set-key (kbd "C-c o") 'traverse-occur-current-buffer)

(define-key dired-mode-map (kbd "A")
'traverse-dired-search-regexp-in-anything-at-point)

(define-key dired-mode-map (kbd "C-c C-z")
'traverse-dired-browse-archive)

(define-key dired-mode-map (kbd "C-c t")
'traverse-dired-find-in-all-files)

(add-to-list 'traverse-ignore-files ".ledger-cache")

'




File: traverselisp.info, Node: Variables, Prev: Exemple of Config, Up: Configuration

Variables
=========







File: traverselisp.info, Node: Functions, Next: Keymap, Prev: Configuration, Up: Top

Functions
*********






File: traverselisp.info, Node: Keymap, Next: Usage, Prev: Functions, Up: Top

Keymap
******

Use C-h m as usual while in a traverse buffer.

Special commands:
key             binding
----------

ESC Prefix Command

N traverse-go-forward

P traverse-go-backward

R traverse-search-and-replace-all

S traverse-search-and-replace

q traverse-quit

| traverse-toggle-split-window-h-v

<S-down> traverse-scroll-down-other-window

<S-up> traverse-scroll-up-other-window







File: traverselisp.info, Node: Usage, Next: Using traverselisp with anything, Prev: Keymap, Up: Top

Usage
*****

* Menu:

* Settings::
* Searching::
* Navigating From traverse buffer::
* Replacing::
* Creating Tag file in project::
* Moving files of all subdirs to one dir::



File: traverselisp.info, Node: Settings, Next: Searching, Prev: Usage, Up: Usage

Settings
========

There is at list 2 important variables to visit and eventually to set:


   * *traverse-ignore-files* ==> this is a list of files to ignore.

   * *traverse-ignore-dirs* ==> this is a list of directories to ignore.

They are already set with default values, you may want to modify that.




File: traverselisp.info, Node: Searching, Next: Navigating From traverse buffer, Prev: Settings, Up: Usage

Searching
=========

* Menu:

* Search in a Whole tree::
* Search in a file::
* Search in a buffer::
* Search from Dired::
* Search in archives::



File: traverselisp.info, Node: Search in a Whole tree, Next: Search in a file, Prev: Searching, Up: Searching

Search in a Whole tree
----------------------

`

M-x traverse-deep-rfind

'

`(traverse-deep-rfind tree regexp &optional only)'

Main function that call walk, if only is omitted it

will be set as nil and search will be proceeded on all files

except on files that are in `traverse-ignore-files'

Called with prefix-argument (C-u) absolute path is displayed





File: traverselisp.info, Node: Search in a file, Next: Search in a buffer, Prev: Search in a Whole tree, Up: Searching

Search in a file
----------------

`

M-x traverse-find-in-file

'

"`(traverse-find-in-file fname regexp &optional full-path)"'

Traverse search regex in a single file




File: traverselisp.info, Node: Search in a buffer, Next: Search from Dired, Prev: Search in a file, Up: Searching

Search in a buffer
------------------

*(traverse-occur-current-buffer regexp)*

Search regexp in current buffer




File: traverselisp.info, Node: Search from Dired, Next: Search in archives, Prev: Search in a buffer, Up: Searching

Search from Dired
-----------------

All the precedent functions can be called from dired.

The function:

   * *traverse-dired-search-regexp-in-anything-at-point*

Will search regexp in file at point in dired buffer

or

if files are marked, it will search in these files.

or

if file at point is a directory, will use `traverse-deep-rfind' on
this directory.

NOTE: if directories are marked, they are ignored.


   * *traverse-dired-find-in-all-files*


"`(traverse-dired-find-in-all-files regexp &optional full-path)"'

Traverse search regex in all files of current dired buffer

except compressed files and symlinks.





File: traverselisp.info, Node: Search in archives, Prev: Search from Dired, Up: Searching

Search in archives
------------------

Traverse use AVFS to search in compressed archives.

To do that, you have first to install *avfs* and *fuse* on your
system:

http://sourceforge.net/projects/avf (http://sourceforge.net/projects/avf)

Then you can open and browse archive in dired with:

"`(traverse-dired-browse-archive)"'

This function use AVFS and FUSE, so be sure to have these programs and
modules installed on your system






File: traverselisp.info, Node: Navigating From traverse buffer, Next: Replacing, Prev: Searching, Up: Usage

Navigating From traverse buffer
===============================

Principal command are:

"N ==> find next occurence in other buffer."

"P ==> find precedent occurence in other buffer."

"R ==> call another menu for interactive replacement."

"S ==> replace regexp in current line with new regexp."





File: traverselisp.info, Node: Replacing, Next: Creating Tag file in project, Prev: Navigating From traverse buffer, Up: Usage

Replacing
=========

* Menu:

* Replace in just one line::
* Replace all::



File: traverselisp.info, Node: Replace in just one line, Next: Replace all, Prev: Replacing, Up: Replacing

Replace in just one line
------------------------

From a traverse buffer use S




File: traverselisp.info, Node: Replace all, Prev: Replace in just one line, Up: Replacing

Replace all
-----------

From a traverse buffer use R

To stop the replace process use C-g





File: traverselisp.info, Node: Creating Tag file in project, Next: Moving files of all subdirs to one dir, Prev: Replacing, Up: Usage

Creating Tag file in project
============================

(traverse-build-tags-in-project dir ext &optional new-file)

Build an etags file in current project.  If `new-file' is non-nil (do
it with C-u) build a new file instead of appending to the current one.
Many file extensions can be enter at `ext' prompt.  Tag file will be
build in `dir'




File: traverselisp.info, Node: Moving files of all subdirs to one dir, Prev: Creating Tag file in project, Up: Usage

Moving files of all subdirs to one dir
======================================

traverse-cp-or-mv-extfiles-in-dir is an interactive compiled Lisp
function in `traverselisp.el'.

(traverse-cp-or-mv-extfiles-in-dir tree ext dir &optional (fn (quote
copy-file)))

Recurse in `tree' and copy/move all files with `ext' in `dir'.
Default is copying, called with prefix-arg (C-u) Move files with `ext'
in `Dir'.  `func' is a symbol when called non-interactively.

Note: `dir' will be use as target and NO search inside it will be
performed.  If you want to move/copy files that are nested in
subdir(s) of `dir' It will fail silently.==> So use another dir target

If `dir' exists and is not empty, it will be synch with the newest
files found in `tree'








File: traverselisp.info, Node: Using traverselisp with anything, Prev: Usage, Up: Top

Using traverselisp with anything
********************************

Using traverselisp in anything is great and fast.

You have only one command to remember:

M-x anything-traverse

Thats all!

You can use with this command a prefix arg: (C-u)

C-u will not have the same meaning depending you are in a dired-buffer

or in a buffer:


   * In a buffer "C-u M-x anything-traverse" will use as input symbol
     at point.

   * In Dired "C-u M-x anything-traverse" will prompt you for a regexp
     to match file (e.g .el$)


It provide two methods:

   * In a buffer

If you are working in a buffer (file, scratch, slime etc..)

it will search for regex in this buffer.

   * In a Dired buffer

Search will be performed on ALL files of current-directory (no
recursion in subdir)

unless you mark files in this dired buffer.

If you mark one or more file(s), the search is performed on this/these
file(s).

You can navigate from file to file in anything-buffer. (M-n/M-p)


* Menu:

* anything-traverse find all files in current tree::
* Anything-traverse variables::
* Anything-traverse configuration::



File: traverselisp.info, Node: anything-traverse find all files in current tree, Next: Anything-traverse variables, Prev: Using traverselisp with anything, Up: Using traverselisp with anything

anything-traverse find all files in current tree
================================================

That is a good alternative to `locate' to search files because you
will search

in the current tree instead of searching in the whole system.

You will have a mini data base for each tree where you launch a search
in.

Anything-traverse will recurse throught current tree and get all the
files of

Directories and subdirectories of this tree.

Use command: `anything-files-in-current-tree'

If you launch that in a big tree (e.g your home directory)

it can take a long time to load, but once it will be loaded, the next

searchs will be fast.

For information, on my laptop with 1.87GHZ cpu (duo), it take 11s to
load

my entire /home/$USER that is actually 19GB (about 35000 files
recorded).

When it is loaded it take only 2 second to load all files in anything.

If `anything-c-files-in-current-tree-allow-tagging' is non--nil (the
default)

the list of files in this tree will be saved to a file named by
default `ANYTHING-TAG-FILE'

so it will not have to make another search if you restart emacs.

If you call `anything-files-in-current-tree' with a prefix arg (C-u),
the data-base will be updated.




File: traverselisp.info, Node: Anything-traverse variables, Next: Anything-traverse configuration, Prev: anything-traverse find all files in current tree, Up: Using traverselisp with anything

Anything-traverse variables
===========================

`anything-c-traverse-func' default: `traverse-buffer-process-ext'

See `traverse-buffer-process-ext' in traverselisp.el

`anything-c-traverse-length-line' default: 80

Length of the line displayed in anything buffer.

`anything-c-files-in-current-tree-ignore-files' default:
`traverse-ignore-files'

See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-ignore-files' default: traverse-ignore-files

See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-fontify-buffer' default:nil

Fontify buffer before starting a search in a buffer.

This have no effect on searching in files from dired.

This can SLOW down search when non--nil but if you don't perform
search in

huge buffers it can be set to t.




File: traverselisp.info, Node: Anything-traverse configuration, Prev: Anything-traverse variables, Up: Using traverselisp with anything

Anything-traverse configuration
===============================

(require 'anything-traverse)

Example config

   * For `anything-c-files-in-current-tree':

(global-set-key (kbd "C-c C-f") 'anything-files-in-current-tree)

(setq anything-c-files-in-current-tree-ignore-files '(".elc$"
.pyc$" ".orig$" ".rej$" "ANYTHING-TAG-FILE"))

   * For `anything-c-source-traverse-occur':

(global-set-key (kbd "C-c M-g") 'anything-traverse)

   * For `anything-traverse-c-source-record-positions':

(global-set-key (kbd "C-c <SPC>") 'anything-traverse-record-pos)

(global-set-key (kbd "C-c j p") 'anything-traverse-positions-ring)

Tag table:
Node: Top191
Node: Installation1086
Node: Configuration1318
Node: Exemple of Config1488
Node: Variables2174
Node: Functions2288
Node: Keymap2401
Node: Usage2873
Node: Settings3153
Node: Searching3546
Node: Search in a Whole tree3804
Node: Search in a file4280
Node: Search in a buffer4574
Node: Search from Dired4807
Node: Search in archives5553
Node: Navigating From traverse buffer6085
Node: Replacing6498
Node: Replace in just one line6705
Node: Replace all6898
Node: Creating Tag file in project7086
Node: Moving files of all subdirs to one dir7571
Node: Using traverselisp with anything8443
Node: anything-traverse find all files in current tree9635
Node: Anything-traverse variables11039
Node: Anything-traverse configuration12027

End tag table
