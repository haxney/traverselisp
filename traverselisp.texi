\input texinfo  @c -*-texinfo-*-

@setfilename traverselisp.info
@settitle traverselisp

@documentencoding iso-8859-1

@iftex
@finalout
@end iftex

@titlepage
@title traverselisp
@author thierry
@end titlepage



@node Top, Installation, (dir), (dir)
@top Overview
@c Page published by Emacs Muse begins here

Traverselisp Manual

Traverse is a library of recursive search functions in Emacs.

@sp 1

@menu
* Installation::                
* Configuration::               
* Functions::                   
* Keymap::                      
* Usage::                       
* Using traverselisp in anything::  
@end menu

@node Installation, Configuration, Top, Top
@chapter Installation

Put the file traverselisp.el in your Load path.

Write in your init-file (.emacs):

@samp{
(require 'traverselisp)
}

@sp 1


@node Configuration, Functions, Installation, Top
@chapter Configuration

@menu
* Exemple of Config::           
* Variables::                   
@end menu

@node Exemple of Config, Variables, Configuration, Configuration
@section Exemple of Config

@samp{

(require 'traverselisp)

(setq traverse-use-avfs t)

(global-set-key (kbd "<f5> f") 'traverse-deep-rfind)

(global-set-key (kbd "<f5> u") 'traverse-build-tags-in-project)

(global-set-key (kbd "C-c o") 'traverse-occur-current-buffer)

(define-key dired-mode-map (kbd "A") 'traverse-dired-search-regexp-in-anything-at-point)

(define-key dired-mode-map (kbd "C-c C-z") 'traverse-dired-browse-archive)

(define-key dired-mode-map (kbd "C-c t") 'traverse-dired-find-in-all-files)

(add-to-list 'traverse-ignore-files ".ledger-cache")

}


@node Variables,  , Exemple of Config, Configuration
@section Variables

@sp 1



@node Functions, Keymap, Configuration, Top
@chapter Functions

@sp 1


@node Keymap, Usage, Functions, Top
@chapter Keymap

Use C-h m as usual while in a traverse buffer.

Special commands:
key             binding
----------

ESC             Prefix Command

N               traverse-go-forward

P               traverse-go-backward

R               traverse-search-and-replace-all

S               traverse-search-and-replace

q               traverse-quit

|               traverse-toggle-split-window-h-v

<S-down>        traverse-scroll-down-other-window

<S-up>          traverse-scroll-up-other-window

@sp 1



@node Usage, Using traverselisp in anything, Keymap, Top
@chapter Usage

@menu
* Settings::                    
* Searching::                   
* Navigating From traverse buffer::  
* Replacing::                   
* Creating Tag file in project::  
* Moving files of all subdirs to one dir::  
@end menu

@node Settings, Searching, Usage, Usage
@section Settings

There is at list 2 important variables to visit and eventually to set:


@itemize @bullet
@item
@emph{traverse-ignore-files} ==> this is a list of files to ignore.

@item
@emph{traverse-ignore-dirs} ==> this is a list of directories to ignore.
@end itemize

They are already set with default values, you may want to modify that.


@node Searching, Navigating From traverse buffer, Settings, Usage
@section Searching

@menu
* Search in a Whole tree::      
* Search in a file::            
* Search in a buffer::          
* Search from Dired::           
* Search in archives::          
@end menu

@node Search in a Whole tree, Search in a file, Searching, Searching
@subsection Search in a Whole tree

@samp{

M-x traverse-deep-rfind

}

@samp{(traverse-deep-rfind tree regexp &optional only)}

Main function that call walk, if only is omitted it

will be set as nil and search will be proceeded on all files

except on files that are in `traverse-ignore-files'

Called with prefix-argument (C-u) absolute path is displayed



@node Search in a file, Search in a buffer, Search in a Whole tree, Searching
@subsection Search in a file

@samp{

M-x traverse-find-in-file

}

``@samp{(traverse-find-in-file fname regexp &optional full-path)"}

Traverse search regex in a single file


@node Search in a buffer, Search from Dired, Search in a file, Searching
@subsection Search in a buffer

@emph{(traverse-occur-current-buffer regexp)}

Search regexp in current buffer


@node Search from Dired, Search in archives, Search in a buffer, Searching
@subsection Search from Dired

All the precedent functions can be called from dired.

The function:

@itemize @bullet
@item
@emph{traverse-dired-search-regexp-in-anything-at-point}
@end itemize

Will search regexp in file at point in dired buffer

or

if files are marked, it will search in these files.

or

if file at point is a directory, will use `traverse-deep-rfind' on this directory.

NOTE: if directories are marked, they are ignored.


@itemize @bullet
@item
@emph{traverse-dired-find-in-all-files}
@end itemize


''@samp{(traverse-dired-find-in-all-files regexp &optional full-path)"}

Traverse search regex in all files of current dired buffer

except compressed files and symlinks.



@node Search in archives,  , Search from Dired, Searching
@subsection Search in archives

Traverse use AVFS to search in compressed archives.

To do that, you have first to install @emph{avfs}  and @emph{fuse} on your system:

@uref{http://sourceforge.net/projects/avf, http://sourceforge.net/projects/avf}

Then you can open and browse archive in dired with:

``@samp{(traverse-dired-browse-archive)"}

This function use AVFS and FUSE, so be sure
to have these programs and modules installed on your system




@node Navigating From traverse buffer, Replacing, Searching, Usage
@section Navigating From traverse buffer

Principal command are:

''N ==> find next occurence in other buffer.``

''P ==> find precedent occurence in other buffer.``

''R ==> call another menu for interactive replacement.``

''S ==> replace regexp in current line with new regexp.``



@node Replacing, Creating Tag file in project, Navigating From traverse buffer, Usage
@section Replacing

@menu
* Replace in just one line::    
* Replace all::                 
@end menu

@node Replace in just one line, Replace all, Replacing, Replacing
@subsection Replace in just one line

From a traverse buffer use S


@node Replace all,  , Replace in just one line, Replacing
@subsection Replace all

From a traverse buffer use R

To stop the replace process use C-g



@node Creating Tag file in project, Moving files of all subdirs to one dir, Replacing, Usage
@section Creating Tag file in project

(traverse-build-tags-in-project dir ext &optional new-file)

Build an etags file in current project.
If `new-file' is non-nil (do it with C-u) build a new file
instead of appending to the current one.
Many file extensions can be enter at `ext' prompt.
Tag file will be build in `dir'


@node Moving files of all subdirs to one dir,  , Creating Tag file in project, Usage
@section Moving files of all subdirs to one dir

traverse-cp-or-mv-extfiles-in-dir is an interactive compiled Lisp
function in `traverselisp.el'.

(traverse-cp-or-mv-extfiles-in-dir tree ext dir &optional (fn (quote
copy-file)))

Recurse in `tree' and copy/move all files with `ext' in `dir'.
Default is copying, called with prefix-arg (C-u) Move files with `ext' in `Dir'.
`func' is a symbol when called non-interactively.

Note: `dir' will be use as target and NO search inside it will be performed.
If you want to move/copy files that are nested in subdir(s) of `dir'
It will fail silently.==> So use another dir target

If `dir' exists and is not empty, it will be synch with the newest files
found in `tree'


@sp 1



@node Using traverselisp in anything,  , Usage, Top
@chapter Using traverselisp in anything

Using traverselisp in anything is great and fast.

You have only one command to remember:

M-x anything-traverse

Thats all!

You can use with this command a prefix arg: (C-u)

C-u will not have the same meaning depending you are in a dired-buffer

or in a buffer:


@itemize @bullet
@item
In a buffer ''C-u M-x anything-traverse`` will use as input symbol at point.

@item
In Dired ''C-u M-x anything-traverse`` will prompt you for a regexp to match file (e.g .el$)
@end itemize


It provide two methods:

@itemize @bullet
@item
In a buffer
@end itemize

If you are working in a buffer (file, scratch, slime etc..)

it will search for regex in this buffer.

@itemize @bullet
@item
In a Dired buffer
@end itemize

Search will be performed on ALL files of current-directory (no recursion in subdir)

unless you mark files in this dired buffer.

If you mark one or more file(s), the search is performed on this/these file(s).

You can navigate from file to file in anything-buffer. (M-n/M-p)


@menu
* anything-traverse find all files in current tree::  
* Anything-traverse variables::  
* Anything-traverse configuration::  
@end menu

@node anything-traverse find all files in current tree, Anything-traverse variables, Using traverselisp in anything, Using traverselisp in anything
@section anything-traverse find all files in current tree

You can have all the files of current tree in anything.

Anything-traverse will recurse throught current tree and get all the files of

Directories and subdirectories of this tree.

Use command: `anything-files-in-current-tree'

If you launch that in a big tree (e.g your home directory)

it can take a long time to load, but once it will be loaded, the next

searchs will be fast.

For information, on my laptop with 1.87GHZ cpu (duo), it take 11s to load

my entire /home/$USER that is actually 19GB

When it is loaded it take only 2 second to load all files in anything.

There is no cache file (at the moment) so it mean the data are not persistent.

That is on next session of emacs you will have to reload all the data.


@node Anything-traverse variables, Anything-traverse configuration, anything-traverse find all files in current tree, Using traverselisp in anything
@section Anything-traverse variables

`anything-c-traverse-func' default: `traverse-buffer-process-ext'

See `traverse-buffer-process-ext' in traverselisp.el

`anything-c-traverse-length-line' default: 80

Length of the line displayed in anything buffer.

`anything-c-files-in-current-tree-ignore-files' default: `traverse-ignore-files'

See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-ignore-files' default: traverse-ignore-files

See `traverse-ignore-files' in traverselisp.el.

`anything-c-traverse-fontify-buffer' default:nil

Fontify buffer before starting a search in a buffer.

This have no effect on searching in files from dired.

This can SLOW down search when non---nil but if you don't perform search in

huge buffers it can be set to t.


@node Anything-traverse configuration,  , Anything-traverse variables, Using traverselisp in anything
@section Anything-traverse configuration

(require 'anything-traverse)

Example config

@itemize @bullet
@item
For `anything-c-files-in-current-tree':
@end itemize

(global-set-key (kbd ''C-c C-f``) 'anything-files-in-current-tree)

(setq anything-c-files-in-current-tree-ignore-files '(''.elc$`` ''.pyc$``
@quotation
''.orig$`` ''.rej$``))
@end quotation


@itemize @bullet
@item
For `anything-c-source-traverse-occur':
@end itemize

(global-set-key (kbd ''C-c M-g``) 'anything-traverse)



@sp 1




@c Page published by Emacs Muse ends here
@bye
